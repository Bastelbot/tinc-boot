// Code generated by go-bindata.
// sources:
// assets/nodes.gotemplate
// DO NOT EDIT!

package monitor

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nodesGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x6f\xe4\xb6\xf5\x7f\xf7\xa7\xe0\x9f\xc1\x1f\xf1\xa2\x23\x69\x2e\xf6\xd8\xab\x95\x06\x70\x83\xb4\xe9\x43\xb6\x8b\x26\x45\x1f\x8a\x3e\x50\xe2\xd1\x88\x35\x45\x2a\x24\x35\x33\xde\x81\xbf\x7b\x41\x5d\xc6\xba\xce\x8e\xbd\x09\x12\x01\x06\x46\xe2\x39\xe4\xef\x77\x6e\x3c\xc7\x41\x6a\x32\x8e\x38\x11\xdb\x10\x83\xc0\x9b\xab\x20\x05\x42\x37\x57\x08\x21\x14\x64\x60\x08\x8a\x53\xa2\x34\x98\x10\x17\x26\x71\xee\xb1\xd7\x5e\x13\x24\x83\x10\xef\x18\xec\x73\xa9\x0c\x46\xb1\x14\x06\x84\x09\xf1\x9e\x51\x93\x86\x14\x76\x2c\x06\xa7\x7c\x99\x21\x26\x98\x61\x84\x3b\x3a\x26\x1c\xc2\x85\x3b\x3f\xed\x65\x98\xe1\xb0\x39\x1e\xdd\x9f\x40\x59\x0d\xf7\x3b\x29\x12\xb6\x75\x3f\x92\x0c\x9e\x9f\x91\x83\x84\xa4\xa0\x03\xaf\x92\xab\x74\xb4\x79\x6a\x7e\xdb\x27\x92\xf4\x09\x1d\x4f\xaf\xf6\x49\xa4\x30\x4e\x42\x32\xc6\x9f\x7c\xf4\xa0\x18\xe1\x33\xf4\x03\xf0\x1d\x18\x16\x93\x19\xd2\x44\x68\x47\x83\x62\xc9\x87\x8e\x1a\xe1\x6c\x2b\x1c\x66\x20\xd3\x3e\x8a\x41\x18\x50\x5d\x01\xca\x74\xce\xc9\x93\x8f\x12\x0e\x87\xee\xd2\x7f\x0b\x6d\x58\xf2\xe4\xd4\x76\x18\xea\x3f\x5f\x9d\x7e\xba\x31\x51\xb4\x07\x39\x23\x6a\xcb\x84\x8f\x16\xeb\xbc\xb7\x73\x4e\x28\x65\x62\xeb\xa3\xdb\xfe\x4a\xc6\x84\x93\x02\xdb\xa6\xc6\x47\xab\x79\x7f\x35\x92\x8a\x82\x72\x14\xa1\xac\xd0\x3e\x5a\x0d\xd7\x0f\x8e\x4e\x09\x95\x7b\x1f\xcd\xf3\x03\x5a\xe4\x07\x2b\x84\xbe\xb9\x2b\x9f\x71\xe4\xd6\xed\x63\xc6\xd6\xec\x33\xf8\x88\x13\xb5\x85\x0f\xc3\xd5\x7d\x0d\x32\x92\x9c\x8e\x92\x73\x8c\xcc\x47\x20\x36\xab\x91\x34\x46\x66\x3d\x0b\xb4\x61\xe9\x22\x12\x60\xce\x45\x41\x26\x85\xd4\x39\x89\x61\x62\x03\x43\x4c\xa1\x9d\x1c\x84\x3d\xb0\xbf\x11\x97\xc4\xf8\x48\x59\x12\x13\xbe\x19\x40\xaf\xfc\x59\xf1\x72\x86\x9e\xab\x56\x55\x65\x96\xe1\x7a\xcf\x77\xf3\xd2\x31\xf3\x61\x04\xc4\x92\x4b\xe5\xa3\x6f\x56\xab\xf5\xfa\xfd\xfb\xee\x9a\x81\x83\x71\x28\xc4\x52\x11\xc3\xa4\xf0\x91\x90\x62\x82\x7d\x2a\xb5\x49\x18\x1f\x78\xf6\x0f\xcb\x3b\x22\xf1\xe3\x56\xc9\x42\x50\xe7\x9c\x09\xea\xb5\x7d\xca\x0c\xbc\xd9\x38\x36\xa3\x09\x13\xa0\x7a\xd6\x39\x15\x83\x88\xcb\xf8\xb1\xbb\xfd\x0e\x94\x2d\x35\xdc\x29\x4b\x8a\x8f\x32\x46\x29\xef\x41\x28\x6b\xa3\x8f\xee\xe7\xf3\xa9\xa8\xce\x8b\x88\xb3\x78\x2c\xaa\x9b\x84\x5a\xcc\xe7\xe8\xff\x58\x66\x4b\x30\x11\x66\x3c\x36\xee\x6f\xc8\x0a\x16\xe3\x27\x94\xa5\xfc\xd2\x42\x74\xe9\x86\x0e\xa1\x54\x81\xd6\x5f\x91\x8e\x25\xae\x0d\xea\x63\xfb\x82\xd7\xce\x81\x1c\x98\xae\x5b\x8b\xc6\x0e\xf7\x53\xb9\x1b\x78\x7d\x00\xa1\x10\x14\x14\x67\x13\xd1\x93\xf6\xf5\xab\x08\xf7\xcb\x6a\xab\x25\x67\x74\x3c\x72\x7b\x89\xb0\xbc\xa4\x78\x2f\xc7\x8a\x37\x9a\x74\x69\x0b\x65\x22\x55\x36\x8a\xf3\x75\x00\x46\x6f\x8f\x69\x00\xa8\x5d\x48\xa6\xa0\x71\x12\x01\x3f\x97\x02\xc3\x3b\xa5\x75\x21\xe9\x8c\x70\x3e\x71\x87\x33\x61\xbd\xe6\x8c\x64\xef\x17\xab\x5b\x73\x1f\xad\x26\x40\x33\x91\x17\xfd\xdb\xe8\x82\x73\x9b\xd8\x18\x46\x75\xed\x8d\xe6\x5c\x6b\x6c\x4a\x74\x0a\xf4\xfc\x6d\xbd\x05\x71\xde\xad\xab\xda\x6b\xf5\xdf\x25\xbe\x41\xbf\x46\xf9\x9d\x66\x7a\xbe\x9b\xa8\x6b\xe6\x62\x3e\xff\xff\x71\xc6\x89\x94\x66\x3c\x67\xeb\x4a\x7c\xa6\x2d\xd3\xc0\x21\xfe\xbd\xdc\x36\x6e\xd6\x9e\xe9\xda\x4c\x41\x8d\x97\x96\xdf\x29\x65\x5b\x00\x38\x24\xc6\x47\x37\x2f\x05\x2e\x49\xe6\xf3\xf9\x7c\x9c\xc6\x9e\xa8\x2f\xc4\xe8\x1f\x89\x07\x21\x53\x3c\x08\xed\x77\xf4\xbf\x59\xaa\x8d\x5d\x6d\x6f\x49\xb5\x93\x69\x46\xaa\x58\xe0\xd5\x53\x56\xe0\x55\x53\x61\x60\xc7\xac\xcd\xd5\x55\x40\xd9\x0e\xc5\x9c\x68\x1d\xe2\x53\x67\x84\xab\x69\xec\x78\xdc\x33\x93\x22\xf7\x7b\xa5\xa4\x7a\x7e\x3e\xed\xd9\xd6\x01\xd5\x48\x9f\x56\xd3\xd5\xa6\xd4\x08\xbc\x74\xd5\x5b\xca\xed\x68\xf8\xfc\x1c\x78\xf9\xcb\x42\xe0\x51\xb6\x6b\x0e\x04\x41\xeb\x83\x9a\xc3\xff\x45\x94\x60\x62\x3b\x71\xbc\x0d\xb7\x91\xf3\x6b\xa5\xaf\x45\xc0\x12\x24\xa4\x41\xee\x0f\x44\x7f\x2a\x7b\xb7\x5f\x0f\x85\x90\xa8\x6e\x07\xcb\x89\x18\x91\x1d\x61\x9c\x44\x1c\x10\x13\xc8\xa4\x80\x04\x98\xbd\x54\x8f\x97\x00\x6d\x43\xb1\xcd\x4e\x0b\x4a\x40\x50\xaa\x20\x09\xb1\xeb\x7a\x18\x51\xb9\x17\x5c\x12\x1a\xe2\xa9\x09\x1d\x4f\xce\xee\x81\x47\x36\x33\x14\xe8\x9c\x88\x0e\x17\xfb\xb4\xce\x6e\x9a\xc5\xce\x46\x0f\xd5\x37\xbb\x89\xd5\xaf\xe7\xfe\x36\x19\x45\xc4\x16\x90\xfb\xd1\xda\xa2\x65\xe4\xd2\x05\xee\x5f\xc0\xc4\x29\xd0\xd6\xf7\x3e\x6b\x3b\x80\xf7\x1c\xd0\x61\xaf\xf2\xd8\xb3\x76\xf6\x8e\xc7\x9a\x8e\xd7\xcc\x48\xb8\xd9\xe3\xe5\x43\xc7\x4c\x8d\x5d\x9a\x8f\xd6\x0e\xc3\x83\x5a\x58\xec\x48\x5d\xb2\xaf\x34\x2b\x0a\x4d\xf8\x94\xf6\x6b\x24\xab\x00\xc0\x1b\xe4\xd4\xb1\x50\x9b\xa7\xf6\x6d\xcb\x40\x53\x67\x55\x73\x72\x65\xeb\xf2\xe7\xa8\x56\xef\xd3\xf1\x08\x5c\xc3\x1b\xac\xd9\x3e\xb8\x33\x5f\xe3\x4d\xfd\xc3\x75\xdd\x0b\x50\xf7\x2c\xf4\x1b\xf2\x6c\xe5\x72\x2f\xaf\xc7\x73\xba\x6c\x9c\x33\x30\xa9\xa4\x21\xfe\xf4\xf7\x9f\x7e\x1e\x64\xf5\x72\xf3\x57\x10\xa0\x88\x81\x32\x71\x91\x8e\x15\xcb\x4d\xe0\xa5\xcb\x9e\x64\xd9\xe8\x0e\x59\xfd\x53\xb0\x5f\x8a\x5a\xb7\xfc\xe7\xcb\xb5\x82\x5f\x0a\xa6\x80\xbe\x1b\x5a\xa0\xea\x3b\xcd\x53\x0e\x21\xb6\x4d\x0f\x46\x39\x27\x31\xa4\x92\x53\x50\x21\xfe\xd8\x6c\x82\x51\x4e\x8c\x01\x25\x42\xfc\x6f\xe2\x7c\x9e\x3b\xef\xff\xf3\x27\x5c\xff\x4b\xaf\x5c\xf7\xfa\x86\x1a\x41\x17\x44\xaa\x2f\x36\xfc\x32\xc1\xea\x13\x27\xc6\xda\x6e\x48\xa1\x6e\xc2\x2a\x2c\x79\x2d\x36\x12\x5c\xa5\xb0\xcc\xed\x0c\x86\x76\x84\x17\x10\x62\x92\xd1\xf5\x0d\xae\xdb\x38\xa0\x9b\xc3\xfd\xda\x59\xdf\x04\x5e\x25\x75\xd1\x16\x6c\x75\xbf\xc6\xa5\xe2\x6a\xf9\x2a\x45\xa2\xb2\xf5\x0d\xde\x3c\xfc\xe3\xc7\x57\x9e\x48\x54\xb6\xbb\x2b\x15\x9d\xbb\x57\x2b\xae\x2b\xc5\xf5\xab\x15\x6f\x2b\xc5\xdb\x69\xc5\xc0\xab\xec\x78\x49\x20\x4c\x39\x59\x41\xc2\x0e\xaf\x8e\xd2\x83\xfb\xe4\x7e\x76\x4d\x13\x8f\x79\xb9\x0b\x6e\xd0\x2f\xee\x96\xee\xe2\x6e\x75\x59\x84\x4e\x00\xfb\x91\xe8\xc7\xf3\xb0\x44\x91\x45\xa0\x7a\xc0\xee\x67\x68\xb1\x9e\xa1\xe5\xcd\x0c\xad\x96\x0d\xbc\x8c\xe8\xc7\x17\x70\xeb\x76\x66\xd5\x69\x95\x31\x11\xe2\x7b\x3c\xea\x9a\xb2\x0b\x3b\x84\x78\xb5\xfc\x2a\x42\x9f\xa4\x32\x6f\x20\xa4\x88\xa0\x32\x3b\x19\xba\xfc\x3f\x7e\xcd\x64\x8a\xc7\xfc\x3c\x8f\xf5\xed\xed\xea\xf6\xad\xd5\x63\xbc\xaa\x17\x1c\x31\xda\xdc\x7d\x7a\xec\x9a\xf1\x8a\x11\x93\x04\x51\x61\x8c\x14\x35\xfd\xea\x05\x23\x29\x62\xce\xe2\xc7\x10\x13\x4a\xab\x6a\x7e\xfd\xee\x74\xa1\x13\x3a\x76\x8b\xd9\xe7\x81\xd2\xa6\xfb\xaa\xdb\x95\x11\x14\xd5\x19\x67\x6f\x98\x69\xe2\x0d\x86\x6a\x7e\x1d\x63\xd9\xe1\xa3\x8b\x28\x63\xe6\x84\x7c\x0b\x02\x9f\xee\x99\x8b\x90\x04\x9e\xad\xab\xdd\xd6\xb0\x16\x09\xaa\x2b\x6a\x53\x0d\x02\x49\x21\xe2\xb2\x7a\xb4\x2c\xd6\x1a\x74\x76\x44\x21\xce\x50\x88\xa8\x8c\x8b\x0c\x84\x71\x63\x05\xc4\xc0\xf7\x1c\xec\xdb\xf5\xb7\x9c\x7d\xfb\xee\x43\x47\x9c\x89\xfc\x8c\x7c\x19\xb4\x6d\x15\xce\x5c\x92\xdb\x76\xe1\xbb\x94\x71\x7a\xcd\x44\xde\x5a\x64\x22\x77\x35\x98\x07\x63\x14\x8b\x0a\x03\xd7\xd8\xda\x07\xcf\x50\x55\x58\xce\x4a\x96\x17\xdd\x0c\x35\x5d\xd5\x59\xd9\x56\xda\xbc\xa8\x34\xb1\x60\x55\x3b\x0c\x23\x23\xa6\x19\x36\xb1\x38\x46\xf1\x3a\x32\xa2\xf5\x3d\x32\x62\x82\xdd\x70\x8f\xa1\x6c\x19\x1b\x56\xd8\xc6\x75\x4f\x92\x09\x01\xea\x67\x38\x18\x14\x22\xac\x20\x93\x3b\xc0\x5d\x89\x3a\x53\x50\xf8\x12\x01\x1d\xc7\xdb\xe7\xc4\x70\x0b\xa6\xa6\xf7\xe7\xa7\xbf\xd1\xeb\x53\xb2\xbe\x73\xab\xbd\x2b\xd7\x71\xd6\x42\xf1\xdc\xb2\xd9\x05\xfb\xb4\x43\xe0\xb4\x8f\x0d\xd9\x26\x58\x03\xaf\x1a\x50\x03\x2f\x35\x19\xdf\xfc\x2f\x00\x00\xff\xff\xb7\x50\x13\xd9\xdd\x1c\x00\x00")

func nodesGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_nodesGotemplate,
		"nodes.gotemplate",
	)
}

func nodesGotemplate() (*asset, error) {
	bytes, err := nodesGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodes.gotemplate", size: 7389, mode: os.FileMode(420), modTime: time.Unix(1570791973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nodes.gotemplate": nodesGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nodes.gotemplate": &bintree{nodesGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
