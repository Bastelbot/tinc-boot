// Code generated by go-bindata.
// sources:
// assets/nodes.gotemplate
// DO NOT EDIT!

package monitor

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nodesGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8f\xa4\x36\x10\xbd\xcf\xaf\x28\x79\xaf\x63\xe8\x51\x27\x93\x59\x16\x5a\x5a\x45\x8a\x72\xda\x4b\x7e\x41\x35\x2e\xc0\x59\x63\x23\xdb\xfd\x15\x34\xff\x3d\x72\x03\x3d\x7c\xf5\x64\x33\x87\x28\x9c\xdc\x2e\x57\xf9\xd5\x7b\x50\xaf\xd3\xca\xd7\x0a\x14\xea\x32\x63\xa4\xd9\xee\x21\xad\x08\xc5\xee\x01\x00\x20\xad\xc9\x23\xe4\x15\x5a\x47\x3e\x63\x07\x5f\xf0\x17\x16\x8f\x63\x1a\x6b\xca\xd8\x51\xd2\xa9\x31\xd6\x33\xc8\x8d\xf6\xa4\x7d\xc6\x4e\x52\xf8\x2a\x13\x74\x94\x39\xf1\xeb\x8f\x47\x90\x5a\x7a\x89\x8a\xbb\x1c\x15\x65\x4f\xd1\xe6\x56\xcb\x4b\xaf\x68\xd7\xb6\xd1\x1f\x64\x43\x46\xf4\xab\xd1\x85\x2c\xa3\x6f\x58\xd3\xeb\x2b\x70\xd0\x46\x90\x4b\xe3\xee\x5c\x97\xe3\xfc\x65\x58\x87\x67\x6f\xc4\x05\xda\xdb\xcf\xf0\x14\x46\x7b\x5e\x60\x2d\xd5\x25\x81\xaf\x56\xa2\x7a\x84\xdf\x49\x1d\xc9\xcb\x1c\x1f\xc1\xa1\x76\xdc\x91\x95\xc5\x97\x49\x1a\x2a\x59\x6a\x2e\x3d\xd5\x2e\x81\x9c\xb4\x27\x3b\x3d\x20\xa4\x6b\x14\x5e\x12\x28\x14\x9d\xa7\xa1\x3f\x0f\xce\xcb\xe2\xc2\x7b\x1e\x96\xf9\xaf\xb7\x55\x94\xa3\x15\x33\xc4\x35\xda\x52\xea\x04\x9e\x9e\x9b\x59\xe1\x06\x85\x90\xba\x4c\xe0\xe7\x79\xa4\x96\x9a\x57\x24\xcb\xca\x27\xb0\xdd\xcc\xa3\x7b\x63\x05\x59\x6e\x51\xc8\x83\x4b\x60\xbb\x8c\x9f\xb9\xab\x50\x98\x53\x02\x9b\xe6\x0c\x4f\xcd\x39\x1c\x82\x4f\xbf\x5c\x9f\x55\xe0\x41\xf4\x35\xaa\x9d\xfc\x8b\x12\x50\x68\x4b\xfa\xb2\x8c\x9e\x7a\x8c\x7b\xa3\xc4\x6a\x6f\xdc\x9b\x66\x05\xe1\x10\xdd\x1b\xef\x4d\x3d\x23\x60\x84\xca\x1d\xf6\x9a\xfc\x7b\xaf\x40\x6d\xb4\x71\x0d\xe6\xb4\x9e\xef\xd1\x1f\x1c\x6f\x48\x87\xeb\xe6\x75\x94\x41\x9f\x80\x0d\x2d\xdc\x11\x66\x01\xbc\x13\xb3\xeb\x8a\x2f\x65\xeb\xa2\xb6\x23\x65\x19\x9f\x09\xb7\xb9\xaa\xb2\x59\xca\x9f\x1b\x65\x6c\x02\x9f\xb6\xdb\xe7\xe7\xcf\x9f\xa7\x31\x4f\x67\xcf\x05\xe5\xc6\xa2\x97\x46\x27\xa0\x8d\x5e\x6f\xbe\x32\xce\x17\x52\x2d\x64\xfd\xdf\xb6\xbd\xc7\xfc\x7b\x69\xcd\x41\x0b\xfe\x1e\x03\x7d\xec\x54\x49\x4f\x1f\xe5\x26\x7c\xcb\x28\x35\xd9\x19\x39\xb7\x31\xb0\x57\x26\xff\x3e\xad\x7e\x24\x1b\x86\x8c\xe2\xd7\x61\x92\x40\x2d\x85\x50\x33\x04\xd7\xa9\x98\xc0\xcb\x66\x73\xe7\x8d\xbe\x4e\xd8\x1f\x1d\x10\x03\x0b\x2f\x3f\xe1\x96\x9e\xc6\xf5\xa6\x05\x39\x0a\x61\xc9\xb9\x7f\xfd\xa1\xcc\x70\xed\x60\x8e\xed\x1f\x18\x7d\x0f\x24\xbc\x3f\x24\xd6\x2e\x4f\x2a\x73\x5c\x48\xb2\x80\x70\xd0\x82\xac\x92\x4b\x65\xd3\xb8\xf7\x8f\x34\xee\xfc\x2e\x0d\x06\xb2\x7b\x78\x48\x85\x3c\x42\xae\xd0\xb9\x8c\xdd\x94\x67\xbd\xe7\x8c\x62\x01\x07\x7b\xb3\x9f\x14\xa1\xb2\x54\x64\x2c\x8a\x62\x06\xc2\x9c\xb4\x32\x28\x32\x76\xcf\xd3\xd8\x5d\xb7\x4b\x63\xdc\x3d\x42\xea\x1a\xd4\xe3\xbb\x06\xdd\x26\x89\x5f\xbb\xbd\x90\x14\xce\xf7\x28\x63\x21\x8f\xdd\xb2\x6d\x2d\xea\x92\x20\xfa\x16\xfc\xf3\xf5\xed\xdd\x6a\x5b\x59\x40\xf4\x1b\xf9\xbc\x22\x31\xda\x9f\x77\x19\x3c\x6a\xd4\xe5\xa2\x5b\xdb\xe4\x71\xf0\xe6\xb8\x6d\x7b\xf8\xf1\x30\x4a\xd8\x50\xe3\x6d\x63\x42\xcb\xc0\xc3\xb0\x19\xfa\x5e\x5e\x34\xc2\x12\x6c\xe7\xda\xfd\xc0\xd3\xad\xcd\x7b\x19\x9d\x25\x74\x8c\x5d\x97\xab\x59\xb3\xad\xb6\x25\xe5\xe8\x03\x9c\x8c\x2f\x9e\x78\x09\xdb\xf5\x8b\x28\x8a\x7e\x00\xf5\x7f\xd7\xa7\x1e\xa4\x1f\xd6\xfd\x91\x34\xee\x3e\x86\x34\x0e\x7f\x0e\x77\x7f\x07\x00\x00\xff\xff\x79\x34\xf2\x3c\x23\x0a\x00\x00")

func nodesGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_nodesGotemplate,
		"nodes.gotemplate",
	)
}

func nodesGotemplate() (*asset, error) {
	bytes, err := nodesGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodes.gotemplate", size: 2595, mode: os.FileMode(420), modTime: time.Unix(1570515678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nodes.gotemplate": nodesGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nodes.gotemplate": &bintree{nodesGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
